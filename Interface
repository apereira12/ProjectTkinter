import customtkinter
import tkinter as tk
import os
from PIL import Image
import pandas as pd
from tkinter import ttk
from tkinter import messagebox
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg)
from matplotlib.figure import Figure
import matplotlib.pyplot as plt



customtkinter.set_appearance_mode("Dark")
customtkinter.set_default_color_theme("green")  # Themes: "blue" (standard), "green", "dark-blue"


class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()

        # Set dark mode style
        self.style = ttk.Style()
        self.style.theme_use('clam')


        self.style.configure("TButton", foreground="green", background="#06C258")  # Button style
        self.style.configure("TLabel", foreground="green", background="#06C258")   # Label style


        self.title("Campeonato Brasileiro")
        self.geometry("1200x1200")
        self.resizable(True, True)
        self.state("zoomed")



        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # load images with light and dark mode image
        image_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "test_images")
        self.logo_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "Analise.png")), size=(26, 26))
        self.Brasileiro = customtkinter.CTkImage(Image.open(os.path.join(image_path, "CampeonatoBrasileiroteste.png")), size=(600, 300))
        self.image_icon_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "image_icon_light.png")), size=(20, 20))
        self.home_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "home_light.png")),
                                                 size=(20, 20))
        self.chat_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "chat_light.png")),
                                                size=(20, 20))
        self.add_user_image = customtkinter.CTkImage(light_image=Image.open(os.path.join(image_path, "add_user_light.png")),
                                                    size=(20, 20))
        self.classificacao_image = customtkinter.CTkImage(
            light_image=Image.open(os.path.join(image_path, "classificacao.png")),
            size=(20, 20))
        self.jogos_image = customtkinter.CTkImage(
            light_image=Image.open(os.path.join(image_path, "jogos.png")),
            size=(20, 20))
        self.Desempenho_image = customtkinter.CTkImage(
            light_image=Image.open(os.path.join(image_path, "Desempenho.png")),
            size=(20, 20))
        self.Gol_image = customtkinter.CTkImage(
            light_image=Image.open(os.path.join(image_path, "Gol.png")),
            size=(20, 20))

        # Criando frame de navegação
        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="#262626")
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(8, weight=1)

        self.navigation_frame_label = customtkinter.CTkLabel(self.navigation_frame, text="Análises do Brasileirão", image=self.logo_image,
                                                             compound="left", font=customtkinter.CTkFont(size=18, weight="bold"), text_color=("#7AF71B", "#7AF71B"))
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Inicio",
                                                   fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),font=('Arial',15), hover_color=("gray70", "gray30"),
                                                   image=self.home_image, anchor="w", command=self.home_button_event)
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.frame_2_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Jogos",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),font=('Arial',15),hover_color=("gray70", "gray30"),
                                                      image=self.jogos_image, anchor="w", command=self.frame_2_button_event)
        self.frame_2_button.grid(row=2, column=0, sticky="ew")

        self.frame_3_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Desempenho Geral",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),font=('Arial',15), hover_color=("gray70", "gray30"),
                                                      image=self.Desempenho_image, anchor="w", command=self.frame_3_button_event)
        self.frame_3_button.grid(row=3, column=0, sticky="ew")

        self.frame_4_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40,
                                                      border_spacing=10, text="Classificação",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),font=('Arial',15),
                                                      hover_color=("gray70", "gray30"),
                                                      image=self.classificacao_image, anchor="w",
                                                      command=self.frame_4_button_event)
        self.frame_4_button.grid(row=4, column=0, sticky="ew")

        self.frame_5_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40,
                                                      border_spacing=10, text="Gols",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),
                                                      font=('Arial', 15),
                                                      hover_color=("gray70", "gray30"),
                                                      image=self.Gol_image, anchor="w",
                                                      command=self.frame_5_button_event)
        self.frame_5_button.grid(row=5, column=0, sticky="ew")
        self.frame_6_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=40,
                                                      border_spacing=10, text="Atualizar Informações",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),
                                                      font=('Arial', 15),
                                                      hover_color=("gray70", "gray30"),
                                                      image=self.add_user_image, anchor="w",
                                                      command=self.frame_6_button_event)
        self.frame_6_button.grid(row=6, column=0, sticky="ew")

        self.create_home_frame()
        self.create_second_frame()
        self.create_third_frame()
        self.create_fourth_frame()
        self.create_fifth_frame()
        self.create_sixth_frame()



        self.select_frame_by_name("home")

    def create_home_frame(self):

        jogosResumo = pd.read_excel("CampeonatoBrasileiro_2018-2023_SerieA.xlsx",sheet_name="Jogos")

        NumerodeJogos = jogosResumo['Hora'].count()
        PrimeiroAno = jogosResumo['AnoJogo'].min()
        UltimoAno=jogosResumo['AnoJogo'].max()

        self.home_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_columnconfigure(0, weight=1)
        self.custom0 = customtkinter.CTkFrame(self.home_frame, corner_radius=8, fg_color="grey11")
        self.custom0.place(relx=0.01, rely=0.01, relwidth=0.98, relheight=0.98)


        self.home_frame_large_image_label = customtkinter.CTkLabel(self.custom0, text="", image=self.Brasileiro)
        self.home_frame_large_image_label.place(relx=0.26, rely=0.01)
        self.frameNumero_Jogos=customtkinter.CTkFrame(self.custom0, fg_color="#080808")
        self.frameNumero_Jogos.place(relx=0.4, rely=0.50, relwidth= 0.15, relheight= 0.10)
        self.TextoJogos = customtkinter.CTkLabel(self.frameNumero_Jogos, text=(f"Número de Jogos"), font=("italic", 17))
        self.TextoJogos.place(relx=0.5, rely=0.25, anchor=tk.CENTER)
        self.TextoJogos1 = customtkinter.CTkLabel(self.frameNumero_Jogos, text=(f"{NumerodeJogos}"), font=("italic", 20), text_color=("#1BF77A", "#1BF77A"))
        self.TextoJogos1.place(relx=0.5, rely=0.65, anchor=tk.CENTER)


        self.frameNumero_Anos = customtkinter.CTkFrame(self.custom0, fg_color="#080808")
        self.frameNumero_Anos.place(relx=0.4, rely=0.70, relwidth=0.15, relheight=0.10)
        self.TextoAnos = customtkinter.CTkLabel(self.frameNumero_Anos, text="Anos Analisados", font=("italic", 17))
        self.TextoAnos.place(relx=0.5, rely=0.1, anchor=tk.CENTER)
        self.TextoAnosMin = customtkinter.CTkLabel(self.frameNumero_Anos, text=f"{PrimeiroAno}", fg_color="grey11", font=("italic", 20), text_color=("#1BF77A", "#1BF77A"))
        self.TextoAnosMin.place(relx=0.20, rely=0.55, anchor=tk.CENTER)
        self.TextoA = customtkinter.CTkLabel(self.frameNumero_Anos, text="à", fg_color="transparent",
                                                   font=("italic", 20), text_color=("#1BF77A", "#1BF77A"))
        self.TextoA.place(relx=0.50, rely=0.55, anchor=tk.CENTER)
        self.TextoAnosMax = customtkinter.CTkLabel(self.frameNumero_Anos, text=f"{UltimoAno}", fg_color="grey11", font=("italic", 20), text_color=("#1BF77A", "#1BF77A"))
        self.TextoAnosMax.place(relx=0.80, rely=0.55, anchor=tk.CENTER)





        self.label = customtkinter.CTkLabel(master=self.custom0,
                               text="Bem-vindo as principais Análises do Campeonato Brasileiro",
                               width=120,
                               height=25,
                               fg_color="transparent",
                               corner_radius=8, font=("verdana", 25))
        self.label.place(relx=0.5, rely=0.45, anchor=tk.CENTER)


    def create_second_frame(self):
        self.second_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.second_frame.grid_columnconfigure(1, weight=10)
        self.custom1 = customtkinter.CTkFrame(self.second_frame, corner_radius=8, fg_color="grey11")
        self.custom1.place(relx=0.01, rely=0.01, relwidth=0.98, relheight=0.98)
        self.second_frame.rowconfigure(1, weight=10)
        self.filtros1 = customtkinter.CTkFrame(self.custom1, fg_color="#808080")
        self.filtros1.place(relx=0.63,rely=0.08, relwidth= 0.35, relheight= 0.15)
        self.textlabelfiltro = customtkinter.CTkLabel(master=self.filtros1,text="Filtros para Análises", font=("verdana",15), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelfiltro.place(relx=0.01,rely=0.2, relwidth= 0.55, relheight= 0.3)
        self.textlabelTitulo = customtkinter.CTkLabel(master=self.custom1, text="Tabela de Jogos", width=10, font=("verdana",25), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTitulo.place(relx=0.35,rely=0.3, relwidth= 0.28, relheight= 0.1)


        self.frameTabela=customtkinter.CTkFrame(self.custom1, fg_color="transparent")
        self.frameTabela.place(relx=0.03, rely=0.4, relwidth= 0.88, relheight= 0.55)

        #Criando o estilo da treeview
        style1 = ttk.Style()
        style1.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style1.configure("Treeview", font=("Helvetica", 10), rowheight=25)
        style1.configure("Treeview.Tree", background="#262626")
        style1.configure("Treeview.TFrame", background="#f2f2f2")
        self.tree1 = ttk.Treeview(self.frameTabela, show="headings", style="Treeview.TFrame")

        self.tree1.place(relx=0.05,rely=0.01, relwidth= 0.93 , relheight= 0.98)


        # Adiciona dados do Excel à Treeview
        self.jogos("CampeonatoBrasileiro_2018-2023_SerieA.xlsx", sheet_name="Jogos")

        #Criando barra de rolagem

        scrollbar = ttk.Scrollbar(self.frameTabela, orient="vertical", command=self.tree1.yview)
        scrollbar.place(relx=0.98,rely=0.01, relwidth= 0.02, relheight= 0.965)
        self.tree1.configure(yscrollcommand=scrollbar.set)

        scrollbar_x = ttk.Scrollbar(self.frameTabela, orient="horizontal", command=self.tree1.xview)
        scrollbar_x.place(relx=0.05,rely=0.96, relwidth= 0.93, relheight= 0.05)
        self.tree1.configure(xscrollcommand=scrollbar_x.set)




    def jogos(self, arquivo_excel, sheet_name):
        # Lê os dados do Excel usando pandas
        df = pd.read_excel(arquivo_excel, sheet_name)

        # Configuração das colunas
        self.tree1["columns"] = df.columns.tolist()

        for col in df.columns:
            self.tree1.heading(col, text=col)
            self.tree1.column(col, anchor=tk.W, width=150)

        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in df.iterrows():
            values = [str(row[col]) for col in df.columns]
            self.tree1.insert("", "end", values=values)

        # Criar as listas para os filtros
        self.anos_disponiveis = sorted(df['AnoJogo'].unique())
        self.anos_disponiveis = ["Todos os Anos"] + [str(i) for i in self.anos_disponiveis]
        self.Resultado_disponivel = sorted(df['Quem Venceu?'].unique())
        self.Resultado_disponivel = ["Todos Resultados"] + [str(i) for i in self.Resultado_disponivel]
        self.rodada = sorted(df['Rodada'].unique())
        self.Rodada = ["Todas Rodadas"] + [str(i) for i in self.rodada]

        #criar os filtros
        self.Resultados = customtkinter.CTkOptionMenu(self.filtros1, values=self.Resultado_disponivel,
                                                       command=self.filtrar_dados)
        self.Anos = customtkinter.CTkOptionMenu(self.filtros1, values=self.anos_disponiveis,
                                                 command=self.filtrar_dados)
        self.Rodada = customtkinter.CTkOptionMenu(self.filtros1, values=self.Rodada,
                                                       command=self.filtrar_dados)

        #localização dos filtros
        self.Anos.place(relx=0.55, rely=0.1, relwidth=0.40, relheight=0.25)
        self.Resultados.place(relx=0.55, rely=0.4, relwidth=0.40, relheight=0.25)
        self.Rodada.place(relx=0.55, rely=0.7, relwidth=0.40, relheight=0.25)

        #Contador de registros
        items = self.tree1.get_children()
        quantidade_registros = len(items)

        ###Configuração do gráfico de pizza

        #tamanho da figura
        self.figResultado = Figure(figsize=(4, 2), dpi=100)
        #cor do fundo
        self.figResultado.patch.set_facecolor('#0d0d0d')
        #quantidade de gráficos dentro da figura
        self.axResultado = self.figResultado.add_subplot(111)

        # Criar um novo objeto FigureCanvasTkAgg
        self.canvasResultado = FigureCanvasTkAgg(self.figResultado, master=self.custom1)
        self.canvasResultado.get_tk_widget().place(relx=0.30, rely=0.01)

        # Dados para o gráfico de pizza
        quantidade_empate = 0
        quantidade_visitante = 0
        quantidade_mandante = 0

        for item in self.tree1.get_children():
            vencedor = self.tree1.set(item, 'Quem Venceu?')
            if vencedor.lower() == 'empate':
                quantidade_empate += 1
            elif vencedor.lower() == 'mandante':
                quantidade_mandante += 1
            elif vencedor.lower() == 'visitante':
                quantidade_visitante += 1

        self.dados = [quantidade_visitante, quantidade_mandante, quantidade_empate]
        self.rotulos = ['Visitante', 'Mandante', 'Empate']
        self.cores = ['#1BF77A', '#F15F36', '#FFD700']  # Cores para cada setor

        # Criar um gráfico de pizza
        self.axResultado.pie(self.dados, colors=self.cores, autopct='%1.1f%%', startangle=90)
        self.axResultado.set_title('Distribuição de Resultados', color="white")
        self.axResultado.legend(self.rotulos, title="Resultados", title_fontsize='small', loc="center right",
                                bbox_to_anchor=(-0.1, 0.5), fontsize='small')

        #Textos com letras pretas
        for text in self.axResultado.texts:
            text.set_color('black')
        # Adicionar rótulos de quantidade_visitante, quantidade_mandante e quantidade_empate
        for i, categoria in enumerate(['Visitante', 'Mandante', 'Empate']):
            if categoria == 'Visitante':
                total_categoria = quantidade_visitante
            elif categoria == 'Mandante':
                total_categoria = quantidade_mandante
            elif categoria == 'Empate':
                total_categoria = quantidade_empate

            label_x = 1.1  # Ajuste conforme necessário
            label_y = 0.5 - 0.2 * i
            self.axResultado.text(label_x, label_y, f'{categoria}: {total_categoria}', color='white', fontsize=10)
        self.axResultado.set_title('Distribuição de Resultados', color="white")


        # Atualizar o canvas
        self.canvasResultado.draw()


        self.quantidadeframe = customtkinter.CTkFrame(self.second_frame, fg_color="#0d0d0d")
        self.quantidadeframe.place(relx=0.05, rely=0.08, relwidth=0.15, relheight=0.15)

        self.label_contagem1 = customtkinter.CTkLabel(self.quantidadeframe, text=f"Quantidade Registros",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"), font=("verdana",12))
        self.label_contagem1.place(relx=0.05, rely=0.2, relwidth=0.93, relheight=0.45)


        self.label_contagem = customtkinter.CTkLabel(self.quantidadeframe, text=f"{quantidade_registros}", font=("Arial",25))
        self.label_contagem.place(relx=0.30, rely=0.55, relwidth=0.45, relheight=0.30)
        self.df = df  # Atribui o DataFrame à variável de instância


    def filtrar_dados(self, *args):
        filtroAno = self.Anos.get()
        filtroResultado = self.Resultados.get()
        filtroRodada = self.Rodada.get()

        # Limpar a Treeview
        self.tree1.delete(*self.tree1.get_children())

        # Adicionar de volta apenas os itens que correspondem ao filtro
        dados_filtrados = []
        for i, row in self.df.iterrows():
            if (filtroAno == "Todos os Anos" or filtroAno.lower() == str(row['AnoJogo']).lower()) and \
                    (filtroResultado == "Todos Resultados" or filtroResultado.lower() == str(
                        row['Quem Venceu?']).lower()) and \
                    (filtroRodada == "Todas Rodadas" or filtroRodada.lower() == str(row['Rodada']).lower()):
                values = [str(row[col]) for col in self.df.columns]
                self.tree1.insert("", "end", values=values)
                dados_filtrados.append(row)

        # Atualizar os dados do gráfico com os dados filtrados
        items = self.tree1.get_children()
        quantidade_registros = len(items)
        self.label_contagem.configure(text=str(quantidade_registros))
        self.atualizar_dados_grafico(dados_filtrados)

    def atualizar_dados_grafico(self, dados):
        # Limpar o gráfico atual
        self.axResultado.clear()

        # Calcular novos dados para o gráfico de pizza
        quantidade_empate = sum(1 for row in dados if row['Quem Venceu?'].lower() == 'empate')
        quantidade_mandante = sum(1 for row in dados if row['Quem Venceu?'].lower() == 'mandante')
        quantidade_visitante = sum(1 for row in dados if row['Quem Venceu?'].lower() == 'visitante')

        self.dados = [quantidade_visitante, quantidade_mandante, quantidade_empate]

        # Criar um gráfico de pizza com os novos dados
        self.axResultado.pie(self.dados, colors=self.cores, autopct='%1.1f%%', startangle=90)

        self.axResultado.legend(self.rotulos, title="Resultados", title_fontsize='small', loc="center left",
                                bbox_to_anchor=(1, 0.5), fontsize='small')
        self.axResultado.legend(self.rotulos, title="Resultados", title_fontsize='small',
                                     loc="upper right", bbox_to_anchor=(-0.15, 0.5), fontsize='small')


        for text in self.axResultado.texts:
            text.set_color('black')
        # Adicionar rótulos de quantidade_visitante, quantidade_mandante e quantidade_empate
        for i, categoria in enumerate(['Visitante', 'Mandante', 'Empate']):
            if categoria == 'Visitante':
                total_categoria = quantidade_visitante
            elif categoria == 'Mandante':
                total_categoria = quantidade_mandante
            elif categoria == 'Empate':
                total_categoria = quantidade_empate

            label_x = 1.1  # Ajuste conforme necessário
            label_y = 0.5 - 0.2 * i
            self.axResultado.text(label_x, label_y, f'{categoria}: {total_categoria}', color='white', fontsize=10)
        self.axResultado.set_title('Distribuição de Resultados', color="white")


        # Atualizar o canvas
        self.canvasResultado.draw()



    def create_third_frame(self):
        self.third_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.custom = customtkinter.CTkFrame(self.third_frame, corner_radius=8, fg_color="grey11")
        self.custom.place(relx = 0.01, rely = 0.01, relwidth=0.98, relheight=0.98)
        self.filtros1 = customtkinter.CTkFrame(self.custom, fg_color="#808080")
        self.filtros1.place(relx=0.63, rely=0.01, relwidth=0.40, relheight=0.22)
        self.textlabelfiltro = customtkinter.CTkLabel(master=self.filtros1, text="Filtros para Análises",
                                                      font=("verdana", 15), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelfiltro.place(relx=0.01, rely=0.2, relwidth=0.55, relheight=0.35)
        self.textlabelTitulo = customtkinter.CTkLabel(master=self.custom, text="Tabela de Jogos", width=10,
                                                      font=("verdana", 25), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTitulo.place(relx=0.35, rely=0.30, relwidth=0.28, relheight=0.1)

        self.frameTabela = customtkinter.CTkFrame(self.custom, fg_color="transparent")
        self.frameTabela.place(relx=0.03, rely=0.4, relwidth=0.88, relheight=0.57)


        #Estilo da Treeview
        style1 = ttk.Style()
        style1.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style1.configure("Treeview", font=("Helvetica", 10), rowheight=25)
        style1.configure("Treeview.Tree", background="#262626")
        style1.configure("Treeview.TFrame", background="#f2f2f2")
        self.treeTimes = ttk.Treeview(self.frameTabela, show="headings", style="Treeview.TFrame")

        self.treeTimes.place(relx=0.05, rely=0.01, relwidth=0.93, relheight=0.98)

        # Adiciona dados do Excel à Treeview
        self.times("CampeonatoBrasileiro_2018-2023_SerieA.xlsx", sheet_name="DesempenhoIndividual")

        scrollbar = ttk.Scrollbar(self.frameTabela, orient="vertical", command=self.treeTimes.yview)
        scrollbar.place(relx=0.98, rely=0.01, relwidth=0.02, relheight=0.965)
        self.treeTimes.configure(yscrollcommand=scrollbar.set)

        scrollbar_x = ttk.Scrollbar(self.frameTabela, orient="horizontal", command=self.treeTimes.xview)
        scrollbar_x.place(relx=0.05, rely=0.96, relwidth=0.93, relheight=0.05)
        self.treeTimes.configure(xscrollcommand=scrollbar_x.set)

        # Configuração do gráfico de pizza
        self.figResultadoTimes = Figure(figsize=(4, 2), dpi=100)
        self.figResultadoTimes.patch.set_facecolor('#0d0d0d')
        self.axResultadoTimes = self.figResultadoTimes.add_subplot(111)

        # Criar um novo objeto FigureCanvasTkAgg
        self.canvasResultadoTimes = FigureCanvasTkAgg(self.figResultadoTimes, master=self.custom)
        self.canvasResultadoTimes.get_tk_widget().place(relx=0.30, rely=0.01)

        quantidade_empate = 0
        quantidade_vitoria = 0
        quantidade_derrota = 0

        for item in self.treeTimes.get_children():
            resultado = self.treeTimes.set(item, 'Resultado')
            if resultado.lower() == 'empatou':
                quantidade_empate += 1
            elif resultado.lower() == 'vitória':
                quantidade_vitoria += 1
            elif resultado.lower() == 'derrota':
                quantidade_derrota += 1

        self.dadosTimes = [quantidade_vitoria, quantidade_derrota, quantidade_empate]
        self.rotulosTimes = ['Vitória', 'Derrota', 'Empate']
        self.coresTimes = ['#1BF77A', '#F15F36', '#FFD700']  # Cores para cada setor

        # Criar um gráfico de pizza
        self.axResultadoTimes.pie(self.dadosTimes, colors=self.coresTimes, autopct='%1.1f%%', startangle=90)
        self.axResultadoTimes.set_title('Distribuição de Resultados', color="white")
        self.axResultadoTimes.legend(self.rotulosTimes, title="Resultados", title_fontsize='small',
                                     loc="upper right", bbox_to_anchor=(-0.15, 0.5), fontsize='small')

        # Adicionar rótulos de total separados por categoria fora do gráfico e em branco
        for i, categoria in enumerate(['Vitória', 'Derrota', 'Empate']):
            if categoria == 'Vitória':
                total_categoria = quantidade_vitoria
            elif categoria == 'Derrota':
                total_categoria = quantidade_derrota
            elif categoria == 'Empate':
                total_categoria = quantidade_empate

            label_x = 1.1  # Ajuste conforme necessário
            label_y = 0.5 - 0.2 * i
            self.axResultadoTimes.text(label_x, label_y, f'{categoria}: {total_categoria}', color='white', fontsize=10)

        # Atualizar o canvas
        self.canvasResultadoTimes.draw()

    def times(self, arquivo_excel, sheet_name):
        # Lê os dados do Excel usando pandas
        dx = pd.read_excel(arquivo_excel, sheet_name)

        # Configuração das colunas
        self.treeTimes["columns"] = dx.columns.tolist()

        for col in dx.columns:
            self.treeTimes.heading(col, text=col)
            self.treeTimes.column(col, anchor=tk.W, width=150)

        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in dx.iterrows():
            values = [str(row[col]) for col in dx.columns]
            self.treeTimes.insert("", "end", values=values)

        # Criar as listas para os filtros
        self.anos_disponiveis1 = sorted(dx['AnoJogo'].unique())
        self.anos_disponiveis1 = ["Todos os Anos"] + [str(i) for i in self.anos_disponiveis1]
        self.resultado_disponivel1 = sorted(dx['Resultado'].unique())
        self.resultado_disponivel1 = ["Todos Resultados"] + [str(i) for i in self.resultado_disponivel1]
        self.rodada1 = sorted(dx['Rodada'].unique())
        self.Rodada1 = ["Todas Rodadas"] + [str(i) for i in self.rodada]
        self.time1 = sorted(dx['Time'].unique())
        self.Time1 = ["Todos Times"] + [str(i) for i in self.time1]
        self.mandante = sorted(dx['Mandante/Visitante'].unique())
        self.Mandante=["Tudo"] + [str(i) for i in self.mandante]


        # criar os filtros
        self.Resultados1 = customtkinter.CTkOptionMenu(self.filtros1, values=self.resultado_disponivel1,
                                                       command=self.filtrar_dados1)
        self.Anos1 = customtkinter.CTkOptionMenu(self.filtros1, values=self.anos_disponiveis1,
                                                 command=self.filtrar_dados1)
        self.Rodada1 = customtkinter.CTkOptionMenu(self.filtros1, values=self.Rodada1,
                                                  command=self.filtrar_dados1)
        self.Time1 = customtkinter.CTkOptionMenu(self.filtros1, values=self.Time1,
                                                  command=self.filtrar_dados1)
        self.Mandante = customtkinter.CTkOptionMenu(self.filtros1, values=self.Mandante,
                                                 command=self.filtrar_dados1)

        # localização dos filtros
        self.Anos1.place(relx=0.55, rely=0.02, relwidth=0.35, relheight=0.15)
        self.Resultados1.place(relx=0.55, rely=0.22, relwidth=0.35, relheight=0.15)
        self.Rodada1.place(relx=0.55, rely=0.42, relwidth=0.35, relheight=0.15)
        self.Time1.place(relx=0.55, rely=0.62, relwidth=0.35, relheight=0.15)
        self.Mandante.place(relx=0.55, rely=0.84, relwidth=0.35, relheight=0.15)


        items1 = self.treeTimes.get_children()
        quantidade_registros1 = len(items1)
        self.quantidadeframe = customtkinter.CTkFrame(self.custom, fg_color="#0d0d0d")
        self.quantidadeframe.place(relx=0.05, rely=0.02, relwidth=0.15, relheight=0.15)

        self.label_contagem1 = customtkinter.CTkLabel(self.quantidadeframe, text=f"Quantidade Registros",
                                                      fg_color="transparent", text_color=("#1BF77A", "#1BF77A"),
                                                      font=("verdana", 12))
        self.label_contagem1.place(relx=0.05, rely=0.03, relwidth=0.93, relheight=0.45)

        self.label_contagem1 = customtkinter.CTkLabel(self.quantidadeframe, text=f"{quantidade_registros1}",
                                                     font=("Arial", 25))
        self.label_contagem1.place(relx=0.30, rely=0.55, relwidth=0.45, relheight=0.30)

        self.dx = dx  # Atribui o DataFrame à variável de instância


    def filtrar_dados1(self, *args):
        filtroAno1 = self.Anos1.get()
        filtroResultado1 = self.Resultados1.get()
        filtroRodada1 = self.Rodada1.get()
        filtroTime1 = self.Time1.get()
        filtroMandante1 = self.Mandante.get()

        # Limpar a Treeview
        self.treeTimes.delete(*self.treeTimes.get_children())
        dados_Times_Filtrados = []
        # Adicionar de volta apenas os itens que correspondem ao filtro
        for i, row in self.dx.iterrows():
            if (filtroAno1 == "Todos os Anos" or filtroAno1.lower() == str(row['AnoJogo']).lower()) and \
                    (filtroResultado1 == "Todos Resultados" or filtroResultado1.lower() == str(row['Resultado']).lower()) and \
                    (filtroRodada1 == "Todas Rodadas" or filtroRodada1.lower() == str(row['Rodada']).lower()) and \
                    (filtroTime1 == "Todos Times" or filtroTime1.lower() == str(row['Time']).lower()) and \
                    (filtroMandante1 == "Tudo" or filtroMandante1.lower() == str(row['Mandante/Visitante']).lower()):
                values = [str(row[col]) for col in self.dx.columns]
                self.treeTimes.insert("", "end", values=values)
                dados_Times_Filtrados.append(row)
        items1 = self.treeTimes.get_children()
        quantidade_registros1 = len(items1)
        self.label_contagem1.configure(text=str(quantidade_registros1))

        self.filtrar_grafico_times(dados_Times_Filtrados)

    def filtrar_grafico_times(self, dados1):
        # Limpar o gráfico atual
        self.axResultadoTimes.clear()

        # Calcular novos dados para o gráfico de pizza
        quantidade_empate = sum(1 for row in dados1 if row['Resultado'].lower() == 'empatou')
        quantidade_vitoria = sum(1 for row in dados1 if row['Resultado'].lower() == 'vitória')
        quantidade_derrota = sum(1 for row in dados1 if row['Resultado'].lower() == 'derrota')

        self.dados1 = [quantidade_vitoria, quantidade_derrota, quantidade_empate]

        # Usar a instância correta do gráfico associada ao canvas
        self.axResultadoTimes.pie(self.dados1, colors=self.coresTimes, autopct='%1.1f%%', startangle=90)

        self.axResultadoTimes.legend(self.rotulosTimes, title="Resultados", title_fontsize='small',
                                     loc="upper right", bbox_to_anchor=(-0.15, 0.5), fontsize='small')

        # Adicionar rótulos de total separados por categoria fora do gráfico e em branco

        for text in self.axResultadoTimes.get_children():
            if isinstance(text, plt.Text):
                text.set_color('black')
        for i, categoria in enumerate(['Vitória', 'Derrota', 'Empate']):
            if categoria == 'Vitória':
                total_categoria = quantidade_vitoria
            elif categoria == 'Derrota':
                total_categoria = quantidade_derrota
            elif categoria == 'Empate':
                total_categoria = quantidade_empate

            label_x = 1.1  # Ajuste conforme necessário
            label_y = 0.5 - 0.2 * i
            self.axResultadoTimes.text(label_x, label_y, f'{categoria}: {total_categoria}', color='white', fontsize=10)

        self.axResultadoTimes.set_title('Distribuição de Resultados', color="white")
        # Atualizar o canvas
        self.canvasResultadoTimes.draw()




    def create_fourth_frame(self):
        self.fourth_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.second_frame.grid_columnconfigure(1, weight=10)
        self.custom4= customtkinter.CTkFrame(self.fourth_frame, corner_radius=8, fg_color="grey11")
        self.custom4.place(relx=0.01, rely=0.01, relwidth=0.98, relheight=0.98)
        self.frameTabela_Classificacao = customtkinter.CTkFrame(self.custom4, fg_color="transparent")
        self.frameTabela_Classificacao.place(relx=0.03, rely=0.28, relwidth=0.88, relheight=0.70)
        #Criar tabview
        self.tabview = customtkinter.CTkTabview(self.custom4, fg_color="transparent", anchor="nw")
        self.tabview.place(relx=0.03, rely=0.03, relwidth=0.95, relheight=0.97)
        self.tabview.add("Temporada")
        self.tabview.add("Acumulado")
        self.tabview.tab("Temporada").grid_columnconfigure(0, weight=1)
        self.tabview.tab("Acumulado").grid_columnconfigure(0, weight=1)
        self.FiltroTemporada = customtkinter.CTkLabel(self.tabview.tab("Temporada"),text="Escolha a Temporada", anchor="nw", fg_color="grey11")
        self.FiltroTemporada.place(relx=0.1, rely=0.20, relwidth=0.2, relheight=0.2)
        self.textlabelTituloAcompanhamento = customtkinter.CTkLabel(master=self.tabview.tab("Temporada"), text="Desempenho por Temporada", width=10,
                                                      font=("verdana", 35), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTituloAcompanhamento.place(relx=0.25, rely=0.01, relwidth=0.45, relheight=0.1)
        self.textlabelTituloAcompanhamento = customtkinter.CTkLabel(master=self.tabview.tab("Acumulado"),
                                                                    text="Desempenho Acumulado", width=10,
                                                                    font=("verdana", 35),
                                                                    text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTituloAcompanhamento.place(relx=0.25, rely=0.01, relwidth=0.45, relheight=0.1)

        #Estilo da Treeview
        style2 = ttk.Style()
        style2.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style2.configure("Treeview", font=("Helvetica", 10), rowheight=25)
        style2.configure("Treeview.Tree", background="#262626")
        style2.configure("Treeview.TFrame", background="#f2f2f2")
        style2.map("Treeview.TFrame", background=[("selected", "#1BF77A")])
        style2.map("Treeview.TFrame", foreground=[("selected", "black")])


        #CriandoTreeview
        self.treeClassificacao = ttk.Treeview(self.tabview.tab("Temporada"), show="headings", style="Treeview.TFrame")
        self.treeClassificacao.place(relx=0.05, rely=0.3, relwidth=0.93, relheight=0.93)

        style3 = ttk.Style()
        style3.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style3.configure("Treeview", font=("Helvetica", 10), rowheight=25)
        style3.configure("Treeview.Tree", background="#262626")
        style3.configure("Treeview.TFrame", background="#f2f2f2")
        style3.map("Treeview.TFrame", background=[("selected", "#1BF77A")])
        style3.map("Treeview.TFrame", foreground=[("selected", "black")])

        self.treeClassificacaoAcumulada = ttk.Treeview(self.tabview.tab("Acumulado"), show="headings", style="Treeview.TFrame")
        self.treeClassificacaoAcumulada.place(relx=0.05, rely=0.3, relwidth=0.93, relheight=0.93)





        self.classificacao("CampeonatoBrasileiro_2018-2023_SerieA.xlsx", sheet_name="DesempenhoTimes")
        #Scroolbar vertical
        scrollbar = ttk.Scrollbar(self.tabview.tab("Temporada"), orient="vertical", command=self.treeClassificacao.yview)
        scrollbar.place(relx=0.98, rely=0.3, relwidth=0.02, relheight=0.65)
        self.treeClassificacao.configure(yscrollcommand=scrollbar.set)





        #Switch para escolha de maiores e melhores resultados
        self.scrollable_frame = customtkinter.CTkFrame(self.custom4)
        self.scrollable_frame.place(relx=0.70, rely=0.05, relwidth=0.25, relheight=0.20)
        self.texto_frame=customtkinter.CTkLabel(self.scrollable_frame, text="Modo de Classificação", font=("verdana", 14),fg_color="transparent", anchor=tk.CENTER, text_color="#1BF77A")
        self.texto_frame.place(relx=0.05, rely=0.05, relwidth = 0.90, relheight=0.35)
        self.scrollable_frame_switches = []
        self.switch_melhor = customtkinter.CTkSwitch(master=self.scrollable_frame, text="Maiores", command=self.switch_melhor_changed)
        self.switch_melhor.place(relx=0.30, rely=0.4, relwidth = 0.70, relheight=0.20)
        self.switch_pior = customtkinter.CTkSwitch(master=self.scrollable_frame, text="Menores", command=self.switch_pior_changed)
        self.switch_pior.place(relx=0.30, rely=0.7, relwidth = 0.7, relheight=0.20)
        self.scrollable_frame_switches = [self.switch_melhor, self.switch_pior]



    def switch_melhor_changed(self):
        if self.switch_melhor.get() == 1:
            self.switch_pior.deselect()
        else:
            self.switch_pior.configure(state="normal")

    def switch_pior_changed(self):
        if self.switch_pior.get() == 1:
            self.switch_melhor.deselect()
        else:
            self.switch_melhor.configure(state="normal")



    def classificacao(self, arquivo_excel, sheet_name):

        # Lê os dados do Excel usando pandas
        dy = pd.read_excel(arquivo_excel, sheet_name)
        dy['Saldo'] = pd.to_numeric(dy['Saldo'], errors='coerce')
        self.temporada = sorted(dy['Temporada'].unique())
        self.temporada = ["Todos os Anos"] + [str(i) for i in self.temporada]

        self.Temporada = customtkinter.CTkOptionMenu(self.FiltroTemporada, values=self.temporada, command=self.filtrar_dadosTemporada)

        self.Temporada.place(relx=0.03, rely=0.1, relwidth=0.70, relheight=0.2)
        df_classificacao_acumulada = dy.groupby(['Time']).agg({'Pontos': 'sum', 'Gols Feitos': 'sum', 'Gols Sofrido': 'sum','Saldo':'sum', 'Vitorias':'sum', 'Derrotas':'sum', 'Empates':'sum'}).reset_index()

        # Configuração das colunas da Treeview de Classificação
        self.treeClassificacao["columns"] = dy.columns.tolist()

        for col in dy.columns:
            self.treeClassificacao.heading(col, text=col,
                                           command=lambda col=col: self.sort_tree(self.treeClassificacao, col, False))
            self.treeClassificacao.column(col, anchor=tk.CENTER, width=150)


        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in dy.iterrows():
            values = [str(row[col]) for col in dy.columns]
            self.treeClassificacao.insert("", "end", values=values)




        # Configuração das colunas da Treeview de Classificação Acumulada
        self.treeClassificacaoAcumulada["columns"] = df_classificacao_acumulada.columns.tolist()

        for col in df_classificacao_acumulada.columns:
            self.treeClassificacaoAcumulada.heading(col, text=col,
                                           command=lambda col=col: self.sort_tree(self.treeClassificacaoAcumulada, col,
                                                                                  False))
            self.treeClassificacaoAcumulada.column(col, anchor=tk.CENTER, width=150)

        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in df_classificacao_acumulada.iterrows():
            values = [str(row[col]) for col in df_classificacao_acumulada.columns]
            self.treeClassificacaoAcumulada.insert("", "end", values=values)
        self.dy = dy
        self.atualizar_dadosTemporada()  # Chama a função para atualizar os dados


    def filtrar_dadosTemporada(self, *args):
        filtroTemporada = self.Temporada.get()

        # Limpar a Treeview
        self.treeClassificacao.delete(*self.treeClassificacao.get_children())

        # Adicionar de volta apenas os itens que correspondem ao filtro
        for i, row in self.dy.iterrows():
            if (filtroTemporada == "Todos os Anos" or filtroTemporada.lower() == str(row['Temporada']).lower()):
                values = [str(row[col]) for col in self.dy.columns]
                self.treeClassificacao.insert("", "end", values=values)



    def atualizar_dadosTemporada(self):
        # Limpar a Treeview
        self.treeClassificacao.delete(*self.treeClassificacao.get_children())

        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in self.dy.iterrows():
            values = [str(row[col]) for col in self.dy.columns]
            self.treeClassificacao.insert("", "end", values=values)




    def sort_tree(self, tree, col, reverse):
        l = [(tree.set(k, col), k) for k in tree.get_children('')]

        # Função de chave para a ordenação
        def key_func(x):
            try:
                # Tenta converter o valor para float
                return float(x[0])
            except ValueError:
                # Se a conversão falhar, retorna infinito para que os não numéricos apareçam no final
                return float('inf')

        # Verifica o estado do switch_melhor para decidir se a ordenação será normal ou reversa
        if self.switch_melhor.get() == 1:
            l.sort(key=key_func, reverse=not reverse)
        elif self.switch_melhor.get() == 0 and self.switch_pior.get() == 0:
            messagebox.showwarning("Aviso", "Você precisa selecionar uma maneira de classificar!")

        else:
            l.sort(key=key_func, reverse=reverse)


        # Move as linhas na árvore com base na ordem da lista ordenada
        for index, (val, k) in enumerate(l):
            tree.move(k, '', index)


    def create_fifth_frame(self):
        self.fifth_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.second_frame.grid_columnconfigure(1, weight=10)
        self.custom5 = customtkinter.CTkFrame(self.fifth_frame, corner_radius=8, fg_color="grey11")
        self.custom5.place(relx=0.01, rely=0.01, relwidth=0.98, relheight=0.98)
        self.textlabelfiltro.place(relx=0.01, rely=0.2, relwidth=0.55, relheight=0.35)
        self.textlabelTitulo = customtkinter.CTkLabel(master=self.custom5, text="Artilharia", width=10,
                                                      font=("verdana", 25), text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTitulo.place(relx=0.35, rely=0.20, relwidth=0.28, relheight=0.1)

        self.tabview1 = customtkinter.CTkTabview(self.custom5, fg_color="transparent", anchor="nw")
        self.tabview1.place(relx=0.03, rely=0.03, relwidth=0.95, relheight=0.97)
        self.tabview1.add("Time")
        self.tabview1.add("Artilheiros")
        self.tabview1.tab("Time").grid_columnconfigure(0, weight=1)
        self.tabview1.tab("Artilheiros").grid_columnconfigure(0, weight=1)

        self.frameTabela = customtkinter.CTkFrame(self.tabview1.tab("Artilheiros"), fg_color="transparent")
        self.frameTabela.place(relx=0.03, rely=0.13, relwidth=0.76, relheight=0.70)
        self.textlabelTituloGolsTimes = customtkinter.CTkLabel(master=self.tabview1.tab("Time"),
                                                                    text="Gols Times por Minutos", width=10,
                                                                    font=("verdana", 25),
                                                                    text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTituloGolsTimes.place(relx=0.20, rely=0.01, relwidth=0.45, relheight=0.1)
        self.textlabelTituloGolsJogadores= customtkinter.CTkLabel(master=self.tabview1.tab("Artilheiros"),
                                                               text="Artilheiros", width=10,
                                                               font=("verdana", 25),
                                                               text_color=("#1BF77A", "#1BF77A"))
        self.textlabelTituloGolsJogadores.place(relx=0.20, rely=0.01, relwidth=0.45, relheight=0.1)

        style1 = ttk.Style()
        style1.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style1.configure("Treeview", font=("Helvetica", 10), rowheight=25)
        style1.configure("Treeview.Tree", background="#262626")
        style1.configure("Treeview.TFrame", background="#f2f2f2")
        self.treeGols = ttk.Treeview(self.frameTabela, show="headings", style="Treeview.TFrame")


        self.treeGols.place(relx=0.05, rely=0.01, relwidth=0.93, relheight=0.98)

        # Adiciona dados do Excel à Treeview
        self.Artilheiros("CampeonatoBrasileiro_2018-2023_SerieA.xlsx", sheet_name="Gols")
        scrollbar = ttk.Scrollbar(self.frameTabela, orient="vertical", command=self.treeGols.yview)
        scrollbar.place(relx=0.98, rely=0.01, relwidth=0.02, relheight=0.965)
        self.treeGols.configure(yscrollcommand=scrollbar.set)

        scrollbar_x = ttk.Scrollbar(self.frameTabela, orient="horizontal", command=self.treeGols.xview)
        scrollbar_x.place(relx=0.05, rely=0.96, relwidth=0.93, relheight=0.05)
        self.treeGols.configure(xscrollcommand=scrollbar_x.set)

        #Times
        df_GolsTimes1 = pd.read_excel("CampeonatoBrasileiro_2018-2023_SerieA.xlsx", sheet_name="Gols")
        df_GolsTimes1 = df_GolsTimes1.groupby(['Minuto', 'Time', 'Ano']).size().reset_index(name='Gols')
        df_GolsTimes1 = df_GolsTimes1.sort_values(by=['Minuto'], ascending=True)
        bins = range(0, 101, 10)
        df_GolsTimes1['MinutosIntervalo'] = pd.cut(df_GolsTimes1['Minuto'], bins=bins, right=False)
        self.df_GolsTimes1 = df_GolsTimes1.sort_values(by=['Minuto'], ascending=True)

        # Cria intervalos de minutos em incrementos de 10 até 100
        bins = range(0, 121, 10)

        # Cria coluna 'MinutosIntervalo' com os intervalos
        self.df_GolsTimes1['MinutosIntervalo'] = pd.cut(self.df_GolsTimes1['Minuto'], bins=bins, right=False)

        self.df_GolsTimes_grouped = self.df_GolsTimes1.groupby('MinutosIntervalo', observed=False)[
            'Gols'].sum().reset_index()

        self.filtros_minutos = customtkinter.CTkFrame( self.tabview1.tab("Time"), fg_color="#808080")
        self.filtros_minutos.place(relx=0.82, rely=0.2, relwidth=0.5, relheight=0.16)
        self.anos_disponiveis2 = sorted(df_GolsTimes1['Ano'].unique())
        self.anos_disponiveis2 = ["Todos os Anos"] + [str(i) for i in self.anos_disponiveis2]
        self.Ano_Minuto = customtkinter.CTkOptionMenu(self.filtros_minutos, values=self.anos_disponiveis2,
                                                      command=self.update_plot)
        self.Ano_Minuto.place(relx=0.05, rely=0.3, relwidth=0.3, relheight=0.2)

        self.Times_disponiveis2 = sorted(df_GolsTimes1['Time'].unique())
        self.Times_disponiveis2 = ["Todos os Times"] + [str(i) for i in self.Times_disponiveis2]
        self.Time_Minuto = customtkinter.CTkOptionMenu(self.filtros_minutos, values=self.Times_disponiveis2,
                                                       command=self.update_plot)
        self.Time_Minuto.place(relx=0.05, rely=0.7, relwidth=0.3, relheight=0.2)
        #inicia o filtro de gráfico
        self.init_plot()



    def Artilheiros(self, arquivo_excel, sheet_name):
        # Lê os dados do Excel usando pandas
        self.df_Artilheiros = pd.read_excel(arquivo_excel, sheet_name)
        self.df_Artilheiros = self.df_Artilheiros.groupby(['Nome', 'Time', 'Ano']).agg({'Minuto': 'count'}).reset_index()
        self.df_Artilheiros = self.df_Artilheiros.rename(columns={'Minuto': 'Gols'})
        self.df_Artilheiros =self.df_Artilheiros.sort_values(by='Gols', ascending=False)

        # Configuração das colunas
        self.treeGols["columns"] = self.df_Artilheiros.columns.tolist()

        for col in self.df_Artilheiros.columns:
            self.treeGols.heading(col, text=col)
            self.treeGols.column(col, anchor=tk.W, width=150)

        # Itera sobre as linhas do DataFrame e insere os dados na Treeview
        for i, row in self.df_Artilheiros.iterrows():
            values = [str(row[col]) for col in self.df_Artilheiros.columns]
            self.treeGols.insert("", "end", values=values)

        self.filtros_Artilheiros = customtkinter.CTkFrame(self.tabview1.tab("Artilheiros"), fg_color="#808080")
        self.filtros_Artilheiros.place(relx=0.82, rely=0.2, relwidth=0.5, relheight=0.16)
        self.anos_disponiveisArtilheiros = sorted(self.df_Artilheiros['Ano'].unique())
        self.anos_disponiveisArtilheiros = ["Todos os Anos"] + [str(i) for i in self.anos_disponiveisArtilheiros]
        self.anos_disponiveisArtilheiros = customtkinter.CTkOptionMenu(self.filtros_Artilheiros,
                                                                 values=self.anos_disponiveisArtilheiros,
                                                                 command=self.AtualizarArtilheiro)
        self.anos_disponiveisArtilheiros.place(relx=0.05, rely=0.3, relwidth=0.3, relheight=0.2)

        self.Times_disponiveisArtilheiros = sorted(self.df_Artilheiros['Time'].unique())
        self.Times_disponiveisArtilheiros = ["Todos os Times"] + [str(i) for i in self.Times_disponiveisArtilheiros]
        self.Times_disponiveisArtilheiros = customtkinter.CTkOptionMenu(self.filtros_Artilheiros,
                                                                        values=self.Times_disponiveisArtilheiros,
                                                                        command=self.AtualizarArtilheiro)
        self.Times_disponiveisArtilheiros.place(relx=0.05, rely=0.7, relwidth=0.3, relheight=0.2)


    def init_plot(self):
        plt.style.use('dark_background')
        self.fig = Figure(figsize=(9, 6), dpi=100)
        self.fig.patch.set_facecolor('#242424')
        self.ax = self.fig.add_subplot(111)

        # criar um novo objeto FigureCanvasTkAgg
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.tabview1.tab("Time"))
        self.canvas.draw()
        self.canvas.get_tk_widget().place(relx=0.05, rely=0.15)

        minutos_intervalo = self.df_GolsTimes_grouped['MinutosIntervalo'].astype(str)
        gols = self.df_GolsTimes_grouped['Gols']
        self.ax.bar(range(len(minutos_intervalo)), gols, color='#1BF77A')
        self.ax.set_xticks(range(len(minutos_intervalo)))
        self.ax.set_xticklabels(minutos_intervalo, rotation=45, ha='right')
        self.ax.set_xticklabels(minutos_intervalo, color='white')
        self.ax.set_xlabel('Minutos', color='white')
        self.ax.set_ylabel('Gols', color='white')

        # Define a cor do texto dos rótulos dos eixos x e y como branco
        self.ax.tick_params(axis='x', colors='white', labelsize=8)
        self.ax.tick_params(axis='y', colors='white')
        #Define rótulo de dados
        for i in range(len(minutos_intervalo)):
            self.ax.annotate(str(gols[i]), xy=(i, gols[i]), ha='center', va='bottom')

    def create_widgets(self):
        # Cria uma instância do widget Canvas
        self.canvas = tk.Canvas(self.tabview1.tab("Time"), width=200, height=200, bg='white')
        self.canvas.pack()

    def update_plot(self, filter_value):


        #Atulizar o gráfico baseando no filtro
        ano_filter = self.Ano_Minuto.get()
        time_filter = self.Time_Minuto.get()

        # Certifica-se de que 'Ano' seja do tipo int64
        self.df_GolsTimes1['Ano'] = self.df_GolsTimes1['Ano'].astype(str)

        # Filtra os dados com base nos valores dos filtros 'Ano' e 'Time'
        filtered_data = self.df_GolsTimes1[(self.df_GolsTimes1['Ano'] == str(ano_filter)) &
                                           (self.df_GolsTimes1['Time'].str.contains(time_filter, case=False, na=False)
                                            if time_filter != "Todos os Times" else True)]

        # Reagrupa os dados filtrados
        filtered_data_grouped = filtered_data.groupby('MinutosIntervalo', observed=False)['Gols'].sum().reset_index()

        # Limpa o gráfico atual
        self.ax.clear()

        # Converte os intervalos para string antes de plotar
        minutos_intervalo_str = filtered_data_grouped['MinutosIntervalo'].astype(str)

        # Plota o novo gráfico com os dados filtrados
        self.ax.bar(minutos_intervalo_str, filtered_data_grouped['Gols'], color='#1BF77A')
        for i in range(len(minutos_intervalo_str)):
            self.ax.annotate(str(filtered_data_grouped['Gols'][i]), xy=(i, filtered_data_grouped['Gols'][i]),
                             ha='center', va='bottom')

        # Configura o tamanho das letras do eixo x
        self.ax.tick_params(axis='x', labelsize=8)

        # Aumenta o espaçamento entre os rótulos do eixo x
        self.ax.set_xticks(range(len(minutos_intervalo_str)))
        self.ax.set_xticklabels(minutos_intervalo_str, rotation=45, ha='right')  # Ajuste conforme necessário

        # Redesenha o canvas
        self.canvas.draw()

    def AtualizarArtilheiro(self, *args):
        filtroAnoArtilheiro = self.anos_disponiveisArtilheiros.get()
        filtroTimeArtilheiro = self.Times_disponiveisArtilheiros.get()

        # Limpar a Treeview
        for item in self.treeGols.get_children():
            self.treeGols.delete(item)

        # Adicionar de volta apenas os itens que correspondem ao filtro

        for i, row in self.df_Artilheiros.iterrows():
            if (filtroAnoArtilheiro == "Todos os Anos" or filtroAnoArtilheiro.lower() == str(row['Ano']).lower()) and \
                    (filtroTimeArtilheiro == "Todos os Times" or filtroTimeArtilheiro.lower() == str(row['Time']).lower()):
                values = [str(row[col]) for col in self.df_Artilheiros.columns]

                self.treeGols.insert("", "end", values=values)

    def create_sixth_frame(self):
        #inserir a atualização dos dados
        self.sixth_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.sixth_frame.grid_columnconfigure(0, weight=1)




    def select_frame_by_name(self, name):

        # set button color for selected button
        self.home_button.configure(fg_color=("gray75", "gray25") if name == "home" else "transparent")
        self.frame_2_button.configure(fg_color=("gray75", "gray25") if name == "frame_2" else "transparent")
        self.frame_3_button.configure(fg_color=("gray75", "gray25") if name == "frame_3" else "transparent")
        self.frame_4_button.configure(fg_color=("gray75", "gray25") if name == "frame_4" else "transparent")
        self.frame_5_button.configure(fg_color=("gray75", "gray25") if name == "frame_5" else "transparent")
        self.frame_6_button.configure(fg_color=("gray75", "gray25") if name == "frame_6" else "transparent")
        # show selected frame
        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()
        if name == "frame_2":
            self.second_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.second_frame.grid_forget()
        if name == "frame_3":
            self.third_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.third_frame.grid_forget()
        if name == "frame_4":
            self.fourth_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.fourth_frame.grid_forget()

        if name == "frame_5":
            self.fifth_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.fifth_frame.grid_forget()

        if name == "frame_6":
            self.sixth_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.sixth_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def frame_2_button_event(self):
        self.select_frame_by_name("frame_2")

    def frame_3_button_event(self):
        self.select_frame_by_name("frame_3")

    def frame_4_button_event(self):
        self.select_frame_by_name("frame_4")

    def frame_5_button_event(self):
        self.select_frame_by_name("frame_5")

    def frame_6_button_event(self):
        self.select_frame_by_name("frame_6")

    def change_appearance_mode_event(self, new_appearance_mode):
        customtkinter.set_appearance_mode(new_appearance_mode)


if __name__ == "__main__":
    app = App()
    app.mainloop()
